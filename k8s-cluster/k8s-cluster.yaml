AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Kubernetes cluster'

Parameters:
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnetCidr1:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the first public subnet

  PublicSubnetCidr2:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the second public subnet

  PublicSubnetCidr3:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the third public subnet

  InstanceType:
    Type: String
    Default: t2.medium
    Description: EC2 instance type for Kubernetes nodes

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access

  AMIId:
    Type: AWS::EC2::Image::Id
    Default: ami-0e9085e60087ce171
    Description: AMI ID for Ubuntu2404

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: k8s-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: k8s-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr3
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs "" ]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the load balancer"
      VpcId: !Ref VPC  # Reference your VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"  # Allows inbound traffic from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"  # Allows all outbound traffic

  SecurityGroupControlPlane:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kubernetes control plane nodes.
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: "10.0.0.0/16" # Private VPC 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" # Replace with your admin IP range.
        - IpProtocol: tcp
          FromPort: 10248
          ToPort: 10260
          CidrIp: "10.0.0.0/16"  # Private VPC 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  SecurityGroupWorkerNodes:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kubernetes worker nodes.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" # Replace with your admin IP range.
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          SourceSecurityGroupId: !Ref SecurityGroupControlPlane
        - IpProtocol: tcp
          FromPort: 30000
          ToPort: 32767 # NodePort range in Kubernetes by default.
          CidrIp: "10.0.0.0/16" # Replace with trusted CIDR block.
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: "10.0.0.0/16" # Replace with trusted CIDR block for DNS.
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443 # Allow HTTPS traffic for Ingress.
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: "0.0.0.0/0"

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIId
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroupControlPlane
      Tags:
        - Key: Name
          Value: k8s-node-1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIId
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref SecurityGroupWorkerNodes
      Tags:
        - Key: Name
          Value: k8s-node-2

  EC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIId
      SubnetId: !Ref PublicSubnet3
      SecurityGroupIds:
        - !Ref SecurityGroupWorkerNodes
      Tags:
        - Key: Name
          Value: k8s-node-3

Outputs:
  VPCId:
    Description: ID of the created VPC.
    Value: !Ref VPC

  SubnetIds:
    Description: Subnet IDs of the public subnets.
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]

  InstancePublicIPs:
    Description: Public IPs of the EC2 instances.
    Value: !Join [",", [!GetAtt EC2Instance1.PublicIp, !GetAtt EC2Instance2.PublicIp, !GetAtt EC2Instance3.PublicIp]]

# To Validate the Template:
# aws cloudformation validate-template --template-body file://k8s-cluster.yaml --region eu-west-1